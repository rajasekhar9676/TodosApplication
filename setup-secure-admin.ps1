# üîê SECURE ADMIN SETUP SCRIPT
# This script helps you set up secure admin credentials
# Run this script as Administrator to configure your environment

Write-Host "üîê SECURE ADMIN SETUP" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green
Write-Host ""

# Check if .env file exists
$envFile = ".env"
if (Test-Path $envFile) {
    Write-Host "‚ö†Ô∏è  .env file already exists!" -ForegroundColor Yellow
    $overwrite = Read-Host "Do you want to overwrite it? (y/N)"
    if ($overwrite -ne "y" -and $overwrite -ne "Y") {
        Write-Host "‚ùå Setup cancelled. Existing .env file preserved." -ForegroundColor Red
        exit
    }
}

Write-Host "üìù Setting up secure admin credentials..." -ForegroundColor Cyan
Write-Host ""

# Get admin credentials securely
Write-Host "üîë SUPER ADMIN SETUP" -ForegroundColor Yellow
$superAdminEmail = Read-Host "Enter Super Admin email"
$superAdminPassword = Read-Host "Enter Super Admin password" -AsSecureString
$superAdminName = Read-Host "Enter Super Admin display name (or press Enter for default)"

Write-Host ""
Write-Host "üîë ADMIN SETUP" -ForegroundColor Yellow
$adminEmail = Read-Host "Enter Admin email"
$adminPassword = Read-Host "Enter Admin password" -AsSecureString
$adminName = Read-Host "Enter Admin display name (or press Enter for default)"

Write-Host ""
Write-Host "üîë MODERATOR SETUP" -ForegroundColor Yellow
$moderatorEmail = Read-Host "Enter Moderator email"
$moderatorPassword = Read-Host "Enter Moderator password" -AsSecureString
$moderatorName = Read-Host "Enter Moderator display name (or press Enter for default)"

Write-Host ""

# Convert secure strings to plain text for .env file
$superAdminPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($superAdminPassword))
$adminPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($adminPassword))
$moderatorPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($moderatorPassword))

# Set default names if not provided
if ([string]::IsNullOrWhiteSpace($superAdminName)) { $superAdminName = "Super Administrator" }
if ([string]::IsNullOrWhiteSpace($adminName)) { $adminName = "Administrator" }
if ([string]::IsNullOrWhiteSpace($moderatorName)) { $moderatorName = "Team Moderator" }

# Create .env file content
$envContent = @"
# üîê SECURE ADMIN CONFIGURATION
# Generated by setup-secure-admin.ps1
# NEVER commit this file to version control!

# Admin Account Credentials
REACT_APP_SUPER_ADMIN_EMAIL=$superAdminEmail
REACT_APP_SUPER_ADMIN_PASSWORD=$superAdminPasswordPlain
REACT_APP_SUPER_ADMIN_NAME=$superAdminName

REACT_APP_ADMIN_EMAIL=$adminEmail
REACT_APP_ADMIN_PASSWORD=$adminPasswordPlain
REACT_APP_ADMIN_NAME=$adminName

REACT_APP_MODERATOR_EMAIL=$moderatorEmail
REACT_APP_MODERATOR_PASSWORD=$moderatorPasswordPlain
REACT_APP_MODERATOR_NAME=$moderatorName

# Email Service Configuration
REACT_APP_GMAIL_CLIENT_ID=your_gmail_client_id
REACT_APP_GMAIL_CLIENT_SECRET=your_gmail_client_secret
REACT_APP_GMAIL_REFRESH_TOKEN=your_gmail_refresh_token

# SMTP Configuration
REACT_APP_SMTP_HOST=smtp.gmail.com
REACT_APP_SMTP_PORT=587
REACT_APP_SMTP_SECURE=false
REACT_APP_SMTP_USER=your_smtp_email
REACT_APP_SMTP_PASS=your_smtp_password

# Other Services
REACT_APP_RESEND_API_KEY=your_resend_api_key
REACT_APP_RESEND_DOMAIN=your_domain.com
REACT_APP_SENDGRID_API_KEY=your_sendgrid_api_key
REACT_APP_SENDGRID_FROM_EMAIL=your_sendgrid_email

# WhatsApp Integration
REACT_APP_DOUBLE_TICK_API_KEY=your_whatsapp_api_key

# Firebase Configuration
REACT_APP_FIREBASE_API_KEY=your_firebase_api_key
REACT_APP_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
REACT_APP_FIREBASE_PROJECT_ID=your_project_id
REACT_APP_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
REACT_APP_FIREBASE_APP_ID=your_app_id
"@

# Write to .env file
try {
    $envContent | Out-File -FilePath $envFile -Encoding UTF8
    Write-Host "‚úÖ .env file created successfully!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üîí SECURITY REMINDERS:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ NEVER commit .env file to version control" -ForegroundColor Red
    Write-Host "‚Ä¢ Add .env to your .gitignore file" -ForegroundColor Red
    Write-Host "‚Ä¢ Keep your admin credentials secure" -ForegroundColor Red
    Write-Host "‚Ä¢ Use strong, unique passwords" -ForegroundColor Red
    Write-Host "‚Ä¢ Consider enabling 2FA for admin accounts" -ForegroundColor Red
    Write-Host ""
    Write-Host "üìÅ .env file location: $(Get-Location)\$envFile" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üöÄ You can now start your application with secure admin credentials!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error creating .env file: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Clear sensitive variables from memory
$superAdminPasswordPlain = $null
$adminPasswordPlain = $null
$moderatorPasswordPlain = $null
$superAdminPassword = $null
$adminPassword = $null
$moderatorPassword = $null

Write-Host ""
Write-Host "üîê Setup completed successfully!" -ForegroundColor Green
